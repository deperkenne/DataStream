name: voting_app

on:
  push:
    branches:
      - main
      - feature
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  unit-testing:
    strategy:
      matrix:
        os: [ ubuntu-24.04, ubuntu-latest ]
        python-version: [ "3.10", "3.11", "3.13" ]
        exclude:
          - os: ubuntu-latest
            python-version: "3.13"
          - os: ubuntu-latest
            python-version: "3.11"

          - os: ubuntu-24.04
            python-version: "3.13"

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run unit tests
        run: |
          pytest repo_voting/test.py

  docker:
    name: Containerization
    runs-on: ubuntu-latest
    needs: unit-testing
    steps:
      - name: checkout Repo
        uses: actions/checkout@v4
      - name: Dockerhub Login
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./repo_voting
          push: false
          tags: kennetchofo/voting-app:${{ github.sha}}
      - name: Docker Image Test
        run: |
          docker images
          docker run --name votingApp ${{ vars.DOCKER_USERNAME }}/voting-app:${{ github.sha}}
          echo see the container log
          docker log votingApp





  sshconnection:
    if: github.rf == 'rfs/heads/dev'

    runs-on: ubuntu-24.04
    needs: unit-testing
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: install ssh
        run: |
          
          mkdir -p /home/runner/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY1 }}" | base64 --decode > /home/runner/.ssh/id_rsa
          chmod 600  /home/runner/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-keyscan 4.182.249.48 >> ~/.ssh/known_hosts
      - name: Execute Remote Command
        run: ssh  kenne@4.182.249.48 "echo 'Connected successfully!'"
